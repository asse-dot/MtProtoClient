//this is an autogenerated file!!
//!!!!!!!!!!
package telegram.raw.types.messages;

import telegram.raw.core.TlObject;
import telegram.raw.core.primitives.BytesPrimitive;
import telegram.raw.core.primitives.StringPrimitive;
import telegram.raw.core.primitives.VectorPrimitive;
import telegram.raw.core.primitives.integers.IntPrimitive;
import telegram.raw.core.primitives.integers.LongPrimitive;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;

public class DialogsSlice extends TlObject {

    public static final int ID = 1910543603;

    public int count;
	public ArrayList<TlObject> dialogs;
	public ArrayList<TlObject> messages;
	public ArrayList<TlObject> chats;
	public ArrayList<TlObject> users;

    public DialogsSlice(int count, ArrayList<TlObject> dialogs, ArrayList<TlObject> messages, ArrayList<TlObject> chats, ArrayList<TlObject> users) {
        this.count = count;
		this.dialogs = dialogs;
		this.messages = messages;
		this.chats = chats;
		this.users = users;
    }

    public static DialogsSlice read(ByteArrayInputStream bytes) throws IOException {
        int count = IntPrimitive.read(bytes).getValue();
		ArrayList<TlObject> dialogs = ((VectorPrimitive)TlObject.read(bytes)).getValue();
		ArrayList<TlObject> messages = ((VectorPrimitive)TlObject.read(bytes)).getValue();
		ArrayList<TlObject> chats = ((VectorPrimitive)TlObject.read(bytes)).getValue();
		ArrayList<TlObject> users = ((VectorPrimitive)TlObject.read(bytes)).getValue();
		
		return new DialogsSlice(count, dialogs, messages, chats, users);
    }

    @Override
    public byte[] write() throws IOException {
        ByteArrayOutputStream bOut = new ByteArrayOutputStream();
		
		bOut.write(new IntPrimitive(ID).write());
		
		
		bOut.write(new IntPrimitive(this.count).write());
		bOut.write(new VectorPrimitive(this.dialogs).write());
		bOut.write(new VectorPrimitive(this.messages).write());
		bOut.write(new VectorPrimitive(this.chats).write());
		bOut.write(new VectorPrimitive(this.users).write());
		
		return bOut.toByteArray();
    }
}
