//this is an autogenerated file!!
//!!!!!!!!!!
package telegram.raw.types;

import telegram.raw.core.TlObject;
import telegram.raw.core.primitives.BytesPrimitive;
import telegram.raw.core.primitives.StringPrimitive;
import telegram.raw.core.primitives.VectorPrimitive;
import telegram.raw.core.primitives.integers.IntPrimitive;
import telegram.raw.core.primitives.integers.LongPrimitive;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;

public class ChannelForbidden extends TlObject {

    public static final int ID = 399807445;

    public boolean broadcast;
	public boolean megagroup;
	public long id;
	public long access_hash;
	public String title;
	public int until_date;

    public ChannelForbidden(boolean broadcast, boolean megagroup, long id, long access_hash, String title, int until_date) {
        this.broadcast = broadcast;
		this.megagroup = megagroup;
		this.id = id;
		this.access_hash = access_hash;
		this.title = title;
		this.until_date = until_date;
    }

    public static ChannelForbidden read(ByteArrayInputStream bytes) throws IOException {
        int flags = IntPrimitive.read(bytes).getValue();
		boolean broadcast = (flags & (1 << 5)) != 0;
		boolean megagroup = (flags & (1 << 8)) != 0;
		long id = LongPrimitive.read(bytes).getValue();
		long access_hash = LongPrimitive.read(bytes).getValue();
		String title = StringPrimitive.read(bytes).getValue();
		int until_date = (flags & (1 << 16)) != 0 ?  IntPrimitive.read(bytes).getValue() : 0;
		
		return new ChannelForbidden(broadcast, megagroup, id, access_hash, title, until_date);
    }

    @Override
    public byte[] write() throws IOException {
        ByteArrayOutputStream bOut = new ByteArrayOutputStream();
		
		bOut.write(new IntPrimitive(ID).write());
		int flags = 0;
		flags |= this.broadcast ? (1 << 5) : 0;
		flags |= this.megagroup ? (1 << 8) : 0;
		flags |= (this.until_date != 0) ? (1 << 16) : 0;
		
		
		bOut.write(new IntPrimitive(flags).write());
		bOut.write(new LongPrimitive(this.id).write());
		bOut.write(new LongPrimitive(this.access_hash).write());
		bOut.write(new StringPrimitive(this.title).write());
		if(this.until_date != 0)
			bOut.write(new IntPrimitive(this.until_date).write());
		
		return bOut.toByteArray();
    }
}
