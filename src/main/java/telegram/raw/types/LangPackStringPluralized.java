//this is an autogenerated file!!
//!!!!!!!!!!
package telegram.raw.types;

import telegram.raw.core.TlObject;
import telegram.raw.core.primitives.BytesPrimitive;
import telegram.raw.core.primitives.StringPrimitive;
import telegram.raw.core.primitives.VectorPrimitive;
import telegram.raw.core.primitives.integers.IntPrimitive;
import telegram.raw.core.primitives.integers.LongPrimitive;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;

public class LangPackStringPluralized extends TlObject {

    public static final int ID = 1816636575;

    public String key;
	public String zero_value;
	public String one_value;
	public String two_value;
	public String few_value;
	public String many_value;
	public String other_value;

    public LangPackStringPluralized(String key, String zero_value, String one_value, String two_value, String few_value, String many_value, String other_value) {
        this.key = key;
		this.zero_value = zero_value;
		this.one_value = one_value;
		this.two_value = two_value;
		this.few_value = few_value;
		this.many_value = many_value;
		this.other_value = other_value;
    }

    public static LangPackStringPluralized read(ByteArrayInputStream bytes) throws IOException {
        int flags = IntPrimitive.read(bytes).getValue();
		String key = StringPrimitive.read(bytes).getValue();
		String zero_value = (flags & (1 << 0)) != 0 ?  StringPrimitive.read(bytes).getValue() : null;
		String one_value = (flags & (1 << 1)) != 0 ?  StringPrimitive.read(bytes).getValue() : null;
		String two_value = (flags & (1 << 2)) != 0 ?  StringPrimitive.read(bytes).getValue() : null;
		String few_value = (flags & (1 << 3)) != 0 ?  StringPrimitive.read(bytes).getValue() : null;
		String many_value = (flags & (1 << 4)) != 0 ?  StringPrimitive.read(bytes).getValue() : null;
		String other_value = StringPrimitive.read(bytes).getValue();
		
		return new LangPackStringPluralized(key, zero_value, one_value, two_value, few_value, many_value, other_value);
    }

    @Override
    public byte[] write() throws IOException {
        ByteArrayOutputStream bOut = new ByteArrayOutputStream();
		
		bOut.write(new IntPrimitive(ID).write());
		int flags = 0;
		flags |= (this.zero_value != null) ? (1 << 0) : 0;
		flags |= (this.one_value != null) ? (1 << 1) : 0;
		flags |= (this.two_value != null) ? (1 << 2) : 0;
		flags |= (this.few_value != null) ? (1 << 3) : 0;
		flags |= (this.many_value != null) ? (1 << 4) : 0;
		
		
		bOut.write(new IntPrimitive(flags).write());
		bOut.write(new StringPrimitive(this.key).write());
		if(this.zero_value != null)
			bOut.write(new StringPrimitive(this.zero_value).write());
		if(this.one_value != null)
			bOut.write(new StringPrimitive(this.one_value).write());
		if(this.two_value != null)
			bOut.write(new StringPrimitive(this.two_value).write());
		if(this.few_value != null)
			bOut.write(new StringPrimitive(this.few_value).write());
		if(this.many_value != null)
			bOut.write(new StringPrimitive(this.many_value).write());
		bOut.write(new StringPrimitive(this.other_value).write());
		
		return bOut.toByteArray();
    }
}
