//this is an autogenerated file!!
//!!!!!!!!!!
package telegram.raw.types.help;

import telegram.raw.core.TlObject;
import telegram.raw.core.primitives.BytesPrimitive;
import telegram.raw.core.primitives.StringPrimitive;
import telegram.raw.core.primitives.VectorPrimitive;
import telegram.raw.core.primitives.integers.IntPrimitive;
import telegram.raw.core.primitives.integers.LongPrimitive;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;

public class CountryCode extends TlObject {

    public static final int ID = 1107543535;

    public String country_code;
	public ArrayList<TlObject> prefixes;
	public ArrayList<TlObject> patterns;

    public CountryCode(String country_code, ArrayList<TlObject> prefixes, ArrayList<TlObject> patterns) {
        this.country_code = country_code;
		this.prefixes = prefixes;
		this.patterns = patterns;
    }

    public static CountryCode read(ByteArrayInputStream bytes) throws IOException {
        int flags = IntPrimitive.read(bytes).getValue();
		String country_code = StringPrimitive.read(bytes).getValue();
		ArrayList<TlObject> prefixes = (flags & (1 << 0)) != 0 ?  ((VectorPrimitive)TlObject.read(bytes)).getValue() : null;
		ArrayList<TlObject> patterns = (flags & (1 << 1)) != 0 ?  ((VectorPrimitive)TlObject.read(bytes)).getValue() : null;
		
		return new CountryCode(country_code, prefixes, patterns);
    }

    @Override
    public byte[] write() throws IOException {
        ByteArrayOutputStream bOut = new ByteArrayOutputStream();
		
		bOut.write(new IntPrimitive(ID).write());
		int flags = 0;
		flags |= (this.prefixes != null) ? (1 << 0) : 0;
		flags |= (this.patterns != null) ? (1 << 1) : 0;
		
		
		bOut.write(new IntPrimitive(flags).write());
		bOut.write(new StringPrimitive(this.country_code).write());
		if(this.prefixes != null)
			bOut.write(new VectorPrimitive(this.prefixes).write());
		if(this.patterns != null)
			bOut.write(new VectorPrimitive(this.patterns).write());
		
		return bOut.toByteArray();
    }
}
