//this is an autogenerated file!!
//!!!!!!!!!!
package telegram.raw.types;

import telegram.raw.core.TlObject;
import telegram.raw.core.primitives.BytesPrimitive;
import telegram.raw.core.primitives.StringPrimitive;
import telegram.raw.core.primitives.VectorPrimitive;
import telegram.raw.core.primitives.integers.IntPrimitive;
import telegram.raw.core.primitives.integers.LongPrimitive;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;

public class InputGroupCallStream extends TlObject {

    public static final int ID = 93890858;

    public TlObject call;
	public long time_ms;
	public int scale;
	public int video_channel;
	public int video_quality;

    public InputGroupCallStream(TlObject call, long time_ms, int scale, int video_channel, int video_quality) {
        this.call = call;
		this.time_ms = time_ms;
		this.scale = scale;
		this.video_channel = video_channel;
		this.video_quality = video_quality;
    }

    public static InputGroupCallStream read(ByteArrayInputStream bytes) throws IOException {
        int flags = IntPrimitive.read(bytes).getValue();
		TlObject call = TlObject.read(bytes);
		long time_ms = LongPrimitive.read(bytes).getValue();
		int scale = IntPrimitive.read(bytes).getValue();
		int video_channel = (flags & (1 << 0)) != 0 ?  IntPrimitive.read(bytes).getValue() : 0;
		int video_quality = (flags & (1 << 0)) != 0 ?  IntPrimitive.read(bytes).getValue() : 0;
		
		return new InputGroupCallStream(call, time_ms, scale, video_channel, video_quality);
    }

    @Override
    public byte[] write() throws IOException {
        ByteArrayOutputStream bOut = new ByteArrayOutputStream();
		
		bOut.write(new IntPrimitive(ID).write());
		int flags = 0;
		flags |= (this.video_channel != 0) ? (1 << 0) : 0;
		flags |= (this.video_quality != 0) ? (1 << 0) : 0;
		
		
		bOut.write(new IntPrimitive(flags).write());
		bOut.write(this.call.write());
		bOut.write(new LongPrimitive(this.time_ms).write());
		bOut.write(new IntPrimitive(this.scale).write());
		if(this.video_channel != 0)
			bOut.write(new IntPrimitive(this.video_channel).write());
		if(this.video_quality != 0)
			bOut.write(new IntPrimitive(this.video_quality).write());
		
		return bOut.toByteArray();
    }
}
