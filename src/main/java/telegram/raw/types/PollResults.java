//this is an autogenerated file!!
//!!!!!!!!!!
package telegram.raw.types;

import telegram.raw.core.TlObject;
import telegram.raw.core.primitives.BytesPrimitive;
import telegram.raw.core.primitives.StringPrimitive;
import telegram.raw.core.primitives.VectorPrimitive;
import telegram.raw.core.primitives.integers.IntPrimitive;
import telegram.raw.core.primitives.integers.LongPrimitive;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;

public class PollResults extends TlObject {

    public static final int ID = -591909213;

    public boolean min;
	public ArrayList<TlObject> results;
	public int total_voters;
	public ArrayList<TlObject> recent_voters;
	public String solution;
	public ArrayList<TlObject> solution_entities;

    public PollResults(boolean min, ArrayList<TlObject> results, int total_voters, ArrayList<TlObject> recent_voters, String solution, ArrayList<TlObject> solution_entities) {
        this.min = min;
		this.results = results;
		this.total_voters = total_voters;
		this.recent_voters = recent_voters;
		this.solution = solution;
		this.solution_entities = solution_entities;
    }

    public static PollResults read(ByteArrayInputStream bytes) throws IOException {
        int flags = IntPrimitive.read(bytes).getValue();
		boolean min = (flags & (1 << 0)) != 0;
		ArrayList<TlObject> results = (flags & (1 << 1)) != 0 ?  ((VectorPrimitive)TlObject.read(bytes)).getValue() : null;
		int total_voters = (flags & (1 << 2)) != 0 ?  IntPrimitive.read(bytes).getValue() : 0;
		ArrayList<TlObject> recent_voters = (flags & (1 << 3)) != 0 ?  ((VectorPrimitive)TlObject.read(bytes)).getValue() : null;
		String solution = (flags & (1 << 4)) != 0 ?  StringPrimitive.read(bytes).getValue() : null;
		ArrayList<TlObject> solution_entities = (flags & (1 << 4)) != 0 ?  ((VectorPrimitive)TlObject.read(bytes)).getValue() : null;
		
		return new PollResults(min, results, total_voters, recent_voters, solution, solution_entities);
    }

    @Override
    public byte[] write() throws IOException {
        ByteArrayOutputStream bOut = new ByteArrayOutputStream();
		
		bOut.write(new IntPrimitive(ID).write());
		int flags = 0;
		flags |= this.min ? (1 << 0) : 0;
		flags |= (this.results != null) ? (1 << 1) : 0;
		flags |= (this.total_voters != 0) ? (1 << 2) : 0;
		flags |= (this.recent_voters != null) ? (1 << 3) : 0;
		flags |= (this.solution != null) ? (1 << 4) : 0;
		flags |= (this.solution_entities != null) ? (1 << 4) : 0;
		
		
		bOut.write(new IntPrimitive(flags).write());
		if(this.results != null)
			bOut.write(new VectorPrimitive(this.results).write());
		if(this.total_voters != 0)
			bOut.write(new IntPrimitive(this.total_voters).write());
		if(this.recent_voters != null)
			bOut.write(new VectorPrimitive(this.recent_voters).write());
		if(this.solution != null)
			bOut.write(new StringPrimitive(this.solution).write());
		if(this.solution_entities != null)
			bOut.write(new VectorPrimitive(this.solution_entities).write());
		
		return bOut.toByteArray();
    }
}
