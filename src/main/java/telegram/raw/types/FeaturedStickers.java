//this is an autogenerated file!!
//!!!!!!!!!!
package telegram.raw.types.messages;

import telegram.raw.core.TlObject;
import telegram.raw.core.primitives.BytesPrimitive;
import telegram.raw.core.primitives.StringPrimitive;
import telegram.raw.core.primitives.VectorPrimitive;
import telegram.raw.core.primitives.integers.IntPrimitive;
import telegram.raw.core.primitives.integers.LongPrimitive;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;

public class FeaturedStickers extends TlObject {

    public static final int ID = -1103615738;

    public boolean premium;
	public long hash;
	public int count;
	public ArrayList<TlObject> sets;
	public ArrayList<TlObject> unread;

    public FeaturedStickers(boolean premium, long hash, int count, ArrayList<TlObject> sets, ArrayList<TlObject> unread) {
        this.premium = premium;
		this.hash = hash;
		this.count = count;
		this.sets = sets;
		this.unread = unread;
    }

    public static FeaturedStickers read(ByteArrayInputStream bytes) throws IOException {
        int flags = IntPrimitive.read(bytes).getValue();
		boolean premium = (flags & (1 << 0)) != 0;
		long hash = LongPrimitive.read(bytes).getValue();
		int count = IntPrimitive.read(bytes).getValue();
		ArrayList<TlObject> sets = ((VectorPrimitive)TlObject.read(bytes)).getValue();
		ArrayList<TlObject> unread = ((VectorPrimitive)TlObject.read(bytes)).getValue();
		
		return new FeaturedStickers(premium, hash, count, sets, unread);
    }

    @Override
    public byte[] write() throws IOException {
        ByteArrayOutputStream bOut = new ByteArrayOutputStream();
		
		bOut.write(new IntPrimitive(ID).write());
		int flags = 0;
		flags |= this.premium ? (1 << 0) : 0;
		
		
		bOut.write(new IntPrimitive(flags).write());
		bOut.write(new LongPrimitive(this.hash).write());
		bOut.write(new IntPrimitive(this.count).write());
		bOut.write(new VectorPrimitive(this.sets).write());
		bOut.write(new VectorPrimitive(this.unread).write());
		
		return bOut.toByteArray();
    }
}
