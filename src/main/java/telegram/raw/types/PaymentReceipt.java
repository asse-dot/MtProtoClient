//this is an autogenerated file!!
//!!!!!!!!!!
package telegram.raw.types.payments;

import telegram.raw.core.TlObject;
import telegram.raw.core.primitives.BytesPrimitive;
import telegram.raw.core.primitives.StringPrimitive;
import telegram.raw.core.primitives.VectorPrimitive;
import telegram.raw.core.primitives.integers.IntPrimitive;
import telegram.raw.core.primitives.integers.LongPrimitive;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;

public class PaymentReceipt extends TlObject {

    public static final int ID = 1891958275;

    public int date;
	public long bot_id;
	public long provider_id;
	public String title;
	public String description;
	public TlObject photo;
	public TlObject invoice;
	public TlObject info;
	public TlObject shipping;
	public long tip_amount;
	public String currency;
	public long total_amount;
	public String credentials_title;
	public ArrayList<TlObject> users;

    public PaymentReceipt(int date, long bot_id, long provider_id, String title, String description, TlObject photo, TlObject invoice, TlObject info, TlObject shipping, long tip_amount, String currency, long total_amount, String credentials_title, ArrayList<TlObject> users) {
        this.date = date;
		this.bot_id = bot_id;
		this.provider_id = provider_id;
		this.title = title;
		this.description = description;
		this.photo = photo;
		this.invoice = invoice;
		this.info = info;
		this.shipping = shipping;
		this.tip_amount = tip_amount;
		this.currency = currency;
		this.total_amount = total_amount;
		this.credentials_title = credentials_title;
		this.users = users;
    }

    public static PaymentReceipt read(ByteArrayInputStream bytes) throws IOException {
        int flags = IntPrimitive.read(bytes).getValue();
		int date = IntPrimitive.read(bytes).getValue();
		long bot_id = LongPrimitive.read(bytes).getValue();
		long provider_id = LongPrimitive.read(bytes).getValue();
		String title = StringPrimitive.read(bytes).getValue();
		String description = StringPrimitive.read(bytes).getValue();
		TlObject photo = (flags & (1 << 2)) != 0 ?  TlObject.read(bytes) : null;
		TlObject invoice = TlObject.read(bytes);
		TlObject info = (flags & (1 << 0)) != 0 ?  TlObject.read(bytes) : null;
		TlObject shipping = (flags & (1 << 1)) != 0 ?  TlObject.read(bytes) : null;
		long tip_amount = (flags & (1 << 3)) != 0 ?  LongPrimitive.read(bytes).getValue() : 0;
		String currency = StringPrimitive.read(bytes).getValue();
		long total_amount = LongPrimitive.read(bytes).getValue();
		String credentials_title = StringPrimitive.read(bytes).getValue();
		ArrayList<TlObject> users = ((VectorPrimitive)TlObject.read(bytes)).getValue();
		
		return new PaymentReceipt(date, bot_id, provider_id, title, description, photo, invoice, info, shipping, tip_amount, currency, total_amount, credentials_title, users);
    }

    @Override
    public byte[] write() throws IOException {
        ByteArrayOutputStream bOut = new ByteArrayOutputStream();
		
		bOut.write(new IntPrimitive(ID).write());
		int flags = 0;
		flags |= (this.photo != null) ? (1 << 2) : 0;
		flags |= (this.info != null) ? (1 << 0) : 0;
		flags |= (this.shipping != null) ? (1 << 1) : 0;
		flags |= (this.tip_amount != 0) ? (1 << 3) : 0;
		
		
		bOut.write(new IntPrimitive(flags).write());
		bOut.write(new IntPrimitive(this.date).write());
		bOut.write(new LongPrimitive(this.bot_id).write());
		bOut.write(new LongPrimitive(this.provider_id).write());
		bOut.write(new StringPrimitive(this.title).write());
		bOut.write(new StringPrimitive(this.description).write());
		if(this.photo != null)
			bOut.write(this.photo.write());
		bOut.write(this.invoice.write());
		if(this.info != null)
			bOut.write(this.info.write());
		if(this.shipping != null)
			bOut.write(this.shipping.write());
		if(this.tip_amount != 0)
			bOut.write(new LongPrimitive(this.tip_amount).write());
		bOut.write(new StringPrimitive(this.currency).write());
		bOut.write(new LongPrimitive(this.total_amount).write());
		bOut.write(new StringPrimitive(this.credentials_title).write());
		bOut.write(new VectorPrimitive(this.users).write());
		
		return bOut.toByteArray();
    }
}
