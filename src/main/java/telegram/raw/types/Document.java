//this is an autogenerated file!!
//!!!!!!!!!!
package telegram.raw.types;

import telegram.raw.core.TlObject;
import telegram.raw.core.primitives.BytesPrimitive;
import telegram.raw.core.primitives.StringPrimitive;
import telegram.raw.core.primitives.VectorPrimitive;
import telegram.raw.core.primitives.integers.IntPrimitive;
import telegram.raw.core.primitives.integers.LongPrimitive;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;

public class Document extends TlObject {

    public static final int ID = -1881881384;

    public long id;
	public long access_hash;
	public byte[] file_reference;
	public int date;
	public String mime_type;
	public long size;
	public ArrayList<TlObject> thumbs;
	public ArrayList<TlObject> video_thumbs;
	public int dc_id;
	public ArrayList<TlObject> attributes;

    public Document(long id, long access_hash, byte[] file_reference, int date, String mime_type, long size, ArrayList<TlObject> thumbs, ArrayList<TlObject> video_thumbs, int dc_id, ArrayList<TlObject> attributes) {
        this.id = id;
		this.access_hash = access_hash;
		this.file_reference = file_reference;
		this.date = date;
		this.mime_type = mime_type;
		this.size = size;
		this.thumbs = thumbs;
		this.video_thumbs = video_thumbs;
		this.dc_id = dc_id;
		this.attributes = attributes;
    }

    public static Document read(ByteArrayInputStream bytes) throws IOException {
        int flags = IntPrimitive.read(bytes).getValue();
		long id = LongPrimitive.read(bytes).getValue();
		long access_hash = LongPrimitive.read(bytes).getValue();
		byte[] file_reference = BytesPrimitive.read(bytes).getValue();
		int date = IntPrimitive.read(bytes).getValue();
		String mime_type = StringPrimitive.read(bytes).getValue();
		long size = LongPrimitive.read(bytes).getValue();
		ArrayList<TlObject> thumbs = (flags & (1 << 0)) != 0 ?  ((VectorPrimitive)TlObject.read(bytes)).getValue() : null;
		ArrayList<TlObject> video_thumbs = (flags & (1 << 1)) != 0 ?  ((VectorPrimitive)TlObject.read(bytes)).getValue() : null;
		int dc_id = IntPrimitive.read(bytes).getValue();
		ArrayList<TlObject> attributes = ((VectorPrimitive)TlObject.read(bytes)).getValue();
		
		return new Document(id, access_hash, file_reference, date, mime_type, size, thumbs, video_thumbs, dc_id, attributes);
    }

    @Override
    public byte[] write() throws IOException {
        ByteArrayOutputStream bOut = new ByteArrayOutputStream();
		
		bOut.write(new IntPrimitive(ID).write());
		int flags = 0;
		flags |= (this.thumbs != null) ? (1 << 0) : 0;
		flags |= (this.video_thumbs != null) ? (1 << 1) : 0;
		
		
		bOut.write(new IntPrimitive(flags).write());
		bOut.write(new LongPrimitive(this.id).write());
		bOut.write(new LongPrimitive(this.access_hash).write());
		bOut.write(new BytesPrimitive(this.file_reference).write());
		bOut.write(new IntPrimitive(this.date).write());
		bOut.write(new StringPrimitive(this.mime_type).write());
		bOut.write(new LongPrimitive(this.size).write());
		if(this.thumbs != null)
			bOut.write(new VectorPrimitive(this.thumbs).write());
		if(this.video_thumbs != null)
			bOut.write(new VectorPrimitive(this.video_thumbs).write());
		bOut.write(new IntPrimitive(this.dc_id).write());
		bOut.write(new VectorPrimitive(this.attributes).write());
		
		return bOut.toByteArray();
    }
}
