//this is an autogenerated file!!
//!!!!!!!!!!
package telegram.raw.functions.stats;

import telegram.raw.core.TlObject;
import telegram.raw.core.primitives.BytesPrimitive;
import telegram.raw.core.primitives.StringPrimitive;
import telegram.raw.core.primitives.VectorPrimitive;
import telegram.raw.core.primitives.integers.IntPrimitive;
import telegram.raw.core.primitives.integers.LongPrimitive;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;

public class GetMessagePublicForwards extends TlObject {

    public static final int ID = 1445996571;

    public TlObject channel;
	public int msg_id;
	public int offset_rate;
	public TlObject offset_peer;
	public int offset_id;
	public int limit;

    public GetMessagePublicForwards(TlObject channel, int msg_id, int offset_rate, TlObject offset_peer, int offset_id, int limit) {
        this.channel = channel;
		this.msg_id = msg_id;
		this.offset_rate = offset_rate;
		this.offset_peer = offset_peer;
		this.offset_id = offset_id;
		this.limit = limit;
    }

    public static GetMessagePublicForwards read(ByteArrayInputStream bytes) throws IOException {
        TlObject channel = TlObject.read(bytes);
		int msg_id = IntPrimitive.read(bytes).getValue();
		int offset_rate = IntPrimitive.read(bytes).getValue();
		TlObject offset_peer = TlObject.read(bytes);
		int offset_id = IntPrimitive.read(bytes).getValue();
		int limit = IntPrimitive.read(bytes).getValue();
		
		return new GetMessagePublicForwards(channel, msg_id, offset_rate, offset_peer, offset_id, limit);
    }

    @Override
    public byte[] write() throws IOException {
        ByteArrayOutputStream bOut = new ByteArrayOutputStream();
		
		bOut.write(new IntPrimitive(ID).write());
		
		
		bOut.write(this.channel.write());
		bOut.write(new IntPrimitive(this.msg_id).write());
		bOut.write(new IntPrimitive(this.offset_rate).write());
		bOut.write(this.offset_peer.write());
		bOut.write(new IntPrimitive(this.offset_id).write());
		bOut.write(new IntPrimitive(this.limit).write());
		
		return bOut.toByteArray();
    }
}
