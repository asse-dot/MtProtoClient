//this is an autogenerated file!!
//!!!!!!!!!!
package telegram.raw.functions.messages;

import telegram.raw.core.TlObject;
import telegram.raw.core.primitives.BytesPrimitive;
import telegram.raw.core.primitives.StringPrimitive;
import telegram.raw.core.primitives.VectorPrimitive;
import telegram.raw.core.primitives.integers.IntPrimitive;
import telegram.raw.core.primitives.integers.LongPrimitive;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;

public class Search extends TlObject {

    public static final int ID = -1593989278;

    public TlObject peer;
	public String q;
	public TlObject from_id;
	public int top_msg_id;
	public TlObject filter;
	public int min_date;
	public int max_date;
	public int offset_id;
	public int add_offset;
	public int limit;
	public int max_id;
	public int min_id;
	public long hash;

    public Search(TlObject peer, String q, TlObject from_id, int top_msg_id, TlObject filter, int min_date, int max_date, int offset_id, int add_offset, int limit, int max_id, int min_id, long hash) {
        this.peer = peer;
		this.q = q;
		this.from_id = from_id;
		this.top_msg_id = top_msg_id;
		this.filter = filter;
		this.min_date = min_date;
		this.max_date = max_date;
		this.offset_id = offset_id;
		this.add_offset = add_offset;
		this.limit = limit;
		this.max_id = max_id;
		this.min_id = min_id;
		this.hash = hash;
    }

    public static Search read(ByteArrayInputStream bytes) throws IOException {
        int flags = IntPrimitive.read(bytes).getValue();
		TlObject peer = TlObject.read(bytes);
		String q = StringPrimitive.read(bytes).getValue();
		TlObject from_id = (flags & (1 << 0)) != 0 ?  TlObject.read(bytes) : null;
		int top_msg_id = (flags & (1 << 1)) != 0 ?  IntPrimitive.read(bytes).getValue() : 0;
		TlObject filter = TlObject.read(bytes);
		int min_date = IntPrimitive.read(bytes).getValue();
		int max_date = IntPrimitive.read(bytes).getValue();
		int offset_id = IntPrimitive.read(bytes).getValue();
		int add_offset = IntPrimitive.read(bytes).getValue();
		int limit = IntPrimitive.read(bytes).getValue();
		int max_id = IntPrimitive.read(bytes).getValue();
		int min_id = IntPrimitive.read(bytes).getValue();
		long hash = LongPrimitive.read(bytes).getValue();
		
		return new Search(peer, q, from_id, top_msg_id, filter, min_date, max_date, offset_id, add_offset, limit, max_id, min_id, hash);
    }

    @Override
    public byte[] write() throws IOException {
        ByteArrayOutputStream bOut = new ByteArrayOutputStream();
		
		bOut.write(new IntPrimitive(ID).write());
		int flags = 0;
		flags |= (this.from_id != null) ? (1 << 0) : 0;
		flags |= (this.top_msg_id != 0) ? (1 << 1) : 0;
		
		
		bOut.write(new IntPrimitive(flags).write());
		bOut.write(this.peer.write());
		bOut.write(new StringPrimitive(this.q).write());
		if(this.from_id != null)
			bOut.write(this.from_id.write());
		if(this.top_msg_id != 0)
			bOut.write(new IntPrimitive(this.top_msg_id).write());
		bOut.write(this.filter.write());
		bOut.write(new IntPrimitive(this.min_date).write());
		bOut.write(new IntPrimitive(this.max_date).write());
		bOut.write(new IntPrimitive(this.offset_id).write());
		bOut.write(new IntPrimitive(this.add_offset).write());
		bOut.write(new IntPrimitive(this.limit).write());
		bOut.write(new IntPrimitive(this.max_id).write());
		bOut.write(new IntPrimitive(this.min_id).write());
		bOut.write(new LongPrimitive(this.hash).write());
		
		return bOut.toByteArray();
    }
}
