//this is an autogenerated file!!
//!!!!!!!!!!
package telegram.raw.functions.messages;

import telegram.raw.core.TlObject;
import telegram.raw.core.primitives.BytesPrimitive;
import telegram.raw.core.primitives.StringPrimitive;
import telegram.raw.core.primitives.VectorPrimitive;
import telegram.raw.core.primitives.integers.IntPrimitive;
import telegram.raw.core.primitives.integers.LongPrimitive;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;

public class GetMessageReactionsList extends TlObject {

    public static final int ID = 1176190792;

    public TlObject peer;
	public int id;
	public TlObject reaction;
	public String offset;
	public int limit;

    public GetMessageReactionsList(TlObject peer, int id, TlObject reaction, String offset, int limit) {
        this.peer = peer;
		this.id = id;
		this.reaction = reaction;
		this.offset = offset;
		this.limit = limit;
    }

    public static GetMessageReactionsList read(ByteArrayInputStream bytes) throws IOException {
        int flags = IntPrimitive.read(bytes).getValue();
		TlObject peer = TlObject.read(bytes);
		int id = IntPrimitive.read(bytes).getValue();
		TlObject reaction = (flags & (1 << 0)) != 0 ?  TlObject.read(bytes) : null;
		String offset = (flags & (1 << 1)) != 0 ?  StringPrimitive.read(bytes).getValue() : null;
		int limit = IntPrimitive.read(bytes).getValue();
		
		return new GetMessageReactionsList(peer, id, reaction, offset, limit);
    }

    @Override
    public byte[] write() throws IOException {
        ByteArrayOutputStream bOut = new ByteArrayOutputStream();
		
		bOut.write(new IntPrimitive(ID).write());
		int flags = 0;
		flags |= (this.reaction != null) ? (1 << 0) : 0;
		flags |= (this.offset != null) ? (1 << 1) : 0;
		
		
		bOut.write(new IntPrimitive(flags).write());
		bOut.write(this.peer.write());
		bOut.write(new IntPrimitive(this.id).write());
		if(this.reaction != null)
			bOut.write(this.reaction.write());
		if(this.offset != null)
			bOut.write(new StringPrimitive(this.offset).write());
		bOut.write(new IntPrimitive(this.limit).write());
		
		return bOut.toByteArray();
    }
}
