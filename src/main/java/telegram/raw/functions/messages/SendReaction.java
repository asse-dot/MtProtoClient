//this is an autogenerated file!!
//!!!!!!!!!!
package telegram.raw.functions.messages;

import telegram.raw.core.TlObject;
import telegram.raw.core.primitives.BytesPrimitive;
import telegram.raw.core.primitives.StringPrimitive;
import telegram.raw.core.primitives.VectorPrimitive;
import telegram.raw.core.primitives.integers.IntPrimitive;
import telegram.raw.core.primitives.integers.LongPrimitive;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;

public class SendReaction extends TlObject {

    public static final int ID = -754091820;

    public boolean big;
	public boolean add_to_recent;
	public TlObject peer;
	public int msg_id;
	public ArrayList<TlObject> reaction;

    public SendReaction(boolean big, boolean add_to_recent, TlObject peer, int msg_id, ArrayList<TlObject> reaction) {
        this.big = big;
		this.add_to_recent = add_to_recent;
		this.peer = peer;
		this.msg_id = msg_id;
		this.reaction = reaction;
    }

    public static SendReaction read(ByteArrayInputStream bytes) throws IOException {
        int flags = IntPrimitive.read(bytes).getValue();
		boolean big = (flags & (1 << 1)) != 0;
		boolean add_to_recent = (flags & (1 << 2)) != 0;
		TlObject peer = TlObject.read(bytes);
		int msg_id = IntPrimitive.read(bytes).getValue();
		ArrayList<TlObject> reaction = (flags & (1 << 0)) != 0 ?  ((VectorPrimitive)TlObject.read(bytes)).getValue() : null;
		
		return new SendReaction(big, add_to_recent, peer, msg_id, reaction);
    }

    @Override
    public byte[] write() throws IOException {
        ByteArrayOutputStream bOut = new ByteArrayOutputStream();
		
		bOut.write(new IntPrimitive(ID).write());
		int flags = 0;
		flags |= this.big ? (1 << 1) : 0;
		flags |= this.add_to_recent ? (1 << 2) : 0;
		flags |= (this.reaction != null) ? (1 << 0) : 0;
		
		
		bOut.write(new IntPrimitive(flags).write());
		bOut.write(this.peer.write());
		bOut.write(new IntPrimitive(this.msg_id).write());
		if(this.reaction != null)
			bOut.write(new VectorPrimitive(this.reaction).write());
		
		return bOut.toByteArray();
    }
}
