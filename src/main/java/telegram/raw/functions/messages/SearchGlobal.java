//this is an autogenerated file!!
//!!!!!!!!!!
package telegram.raw.functions.messages;

import telegram.raw.core.TlObject;
import telegram.raw.core.primitives.BytesPrimitive;
import telegram.raw.core.primitives.StringPrimitive;
import telegram.raw.core.primitives.VectorPrimitive;
import telegram.raw.core.primitives.integers.IntPrimitive;
import telegram.raw.core.primitives.integers.LongPrimitive;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;

public class SearchGlobal extends TlObject {

    public static final int ID = 1271290010;

    public int folder_id;
	public String q;
	public TlObject filter;
	public int min_date;
	public int max_date;
	public int offset_rate;
	public TlObject offset_peer;
	public int offset_id;
	public int limit;

    public SearchGlobal(int folder_id, String q, TlObject filter, int min_date, int max_date, int offset_rate, TlObject offset_peer, int offset_id, int limit) {
        this.folder_id = folder_id;
		this.q = q;
		this.filter = filter;
		this.min_date = min_date;
		this.max_date = max_date;
		this.offset_rate = offset_rate;
		this.offset_peer = offset_peer;
		this.offset_id = offset_id;
		this.limit = limit;
    }

    public static SearchGlobal read(ByteArrayInputStream bytes) throws IOException {
        int flags = IntPrimitive.read(bytes).getValue();
		int folder_id = (flags & (1 << 0)) != 0 ?  IntPrimitive.read(bytes).getValue() : 0;
		String q = StringPrimitive.read(bytes).getValue();
		TlObject filter = TlObject.read(bytes);
		int min_date = IntPrimitive.read(bytes).getValue();
		int max_date = IntPrimitive.read(bytes).getValue();
		int offset_rate = IntPrimitive.read(bytes).getValue();
		TlObject offset_peer = TlObject.read(bytes);
		int offset_id = IntPrimitive.read(bytes).getValue();
		int limit = IntPrimitive.read(bytes).getValue();
		
		return new SearchGlobal(folder_id, q, filter, min_date, max_date, offset_rate, offset_peer, offset_id, limit);
    }

    @Override
    public byte[] write() throws IOException {
        ByteArrayOutputStream bOut = new ByteArrayOutputStream();
		
		bOut.write(new IntPrimitive(ID).write());
		int flags = 0;
		flags |= (this.folder_id != 0) ? (1 << 0) : 0;
		
		
		bOut.write(new IntPrimitive(flags).write());
		if(this.folder_id != 0)
			bOut.write(new IntPrimitive(this.folder_id).write());
		bOut.write(new StringPrimitive(this.q).write());
		bOut.write(this.filter.write());
		bOut.write(new IntPrimitive(this.min_date).write());
		bOut.write(new IntPrimitive(this.max_date).write());
		bOut.write(new IntPrimitive(this.offset_rate).write());
		bOut.write(this.offset_peer.write());
		bOut.write(new IntPrimitive(this.offset_id).write());
		bOut.write(new IntPrimitive(this.limit).write());
		
		return bOut.toByteArray();
    }
}
